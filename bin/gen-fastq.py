#!/usr/bin/env python3

import argparse
import csv
import subprocess

from pathlib import Path
from sys import stderr


"""
Generates simulated reads with a weighted set of reference genomes (fasta files).

By: Akash Pandit
Last Edited: August 1st, 2025
"""


def parse_ref_percent_tsv(refpct_tsv: str) -> list[tuple[Path, int]]:
    if not Path(refpct_tsv).is_file():
        print("[Error] no file exists at path", refpct_tsv, file=stderr)
        exit(1)

    with open(refpct_tsv, newline='') as f:
        reader = csv.reader(f, delimiter='\t')
        valid_pairs: list[tuple[Path, int]] = []
        percent_sum = 0
        for row_num, row in enumerate(reader, start=1):
            if not row:
                continue
            try:
                refpath, percent = Path(row[0]), int(row[1])
                row_num += 1
                percent_sum += percent
            except TypeError:
                print(f"[Error] invalid format on row {row_num}, expected 'filepath[tab]integer' and got '{row[0]}[tab]{row[1]}'", 
                      file=stderr)
                exit(1)
            if not refpath.is_file():
                print("[Error] no file exists at path", str(refpath), "in", refpct_tsv, file=stderr)
                exit(1)
            if refpath.suffix not in (".fa", ".fasta", '.fna'):
                print("[Error] expected reference with extension .fa, .fna, or .fasta, got file", 
                      refpath.name, "in", refpct_tsv, file=stderr)
                exit(1)
            if percent <= 0 or percent > 100:
                print("[Error] expected percent in the range (0, 100], got", percent, "on", row_num, "in", refpct_tsv, file=stderr)
                exit(1)
            if percent_sum > 100:
                print("[Error] percent sum in tsv exceeded 100 at line", row_num, "on", row_num, "in", refpct_tsv, file=stderr)
                exit(1)

            valid_pairs.append((refpath, percent))
            
    return valid_pairs


if __name__ == "__main__":
    """
    1. parse command line arguments
    """


    parser = argparse.ArgumentParser(description="""
        Generates a set of paired-end FASTQs with n read pairs. Users provide a set of references and what
        percentage of the FASTQ set should come from said reference, passed as a tsv file with no header.
        percents must add up to 100 or the script will prematurely exit.
        """)

    parser.add_argument("-n", "--num-pairs", type=int, action="store", required=False, default=1_000_000,
                        help="number of read pairs per paired end. Total reads across both R1 and R2 will be 2x this value.")
    parser.add_argument("-r", "--refpct-tsv", type=parse_ref_percent_tsv, action="store", required=True,
                        help="path to reference FASTA and associated percent (weight) in FASTQs. Repeatable.")
    parser.add_argument("-o", "--outdir", type=Path, action="store", required=False, default=Path("./output-wgsim").resolve())
    parser.add_argument("-b", "--blend-name", type=str, action="store", required=True)
    args = parser.parse_args()

    num_pairs: int = args.num_pairs
    refpercents: list[tuple[Path, int]] = args.refpct_tsv
    outdir: Path = args.outdir
    blend_name: str = args.blend_name


    """
    2. set up variables
    """


    # note: strings as no need to do any int specific operations 
    BASE_ERR_RATE   = '0.020'     # higher than expected error rate to account for degradation
    OUTER_DIST      = '100'       # small fragment size for same reason as listed above
    STDEV           = '30'        
    LEN_FIRST_READ  = '150'
    LEN_SECOND_READ = '150'
    MUTATION_RATE   = '0.001'
    # num_pairs defined in sec.1 through cli arg

    refreads = [(refpath, round(num_pairs / 100) * percent) for refpath, percent in refpercents]
    # convert percent -> number of read pairs

    outdir.mkdir(exist_ok=True)
    this_script_path = str(Path(__file__).resolve())


    """
    3. set up & execute wgsim slurm scripts
    """


    for refseq, num_pairs_per_ref in refreads:

        refseq_str = str(refseq)
        num_pairs_per_ref = str(num_pairs_per_ref)
        outdir_fastq_path_stem = str(outdir.resolve()/refseq.stem)

        wgsim_flags = " ".join([
            '-e', BASE_ERR_RATE,
            '-d', OUTER_DIST,
            '-s', STDEV,
            '-N', num_pairs_per_ref,
            '-1', LEN_FIRST_READ,
            '-2', LEN_SECOND_READ,
            '-r', MUTATION_RATE
        ])

        slurm_script = "\n".join([
            "#!/bin/bash",
            "",
            "#SBATCH -n 1 --mem=10G -t 1:00:00",
        #    f"#SBATCH --output={logdir}/slurm-{refseq.stem}.out",
            "",
            "# Generate sample reads for reference file " + refseq.name,
           f"# Script generated by {this_script_path}",
            "",
            "# load required modules",
            "module load samtools/1.21",
            "",
           f"wgsim {refseq_str} {outdir_fastq_path_stem}-R1.fastq {outdir_fastq_path_stem}-R2.fastq " + wgsim_flags
        ])

        slurm_script_fp = outdir/f"slurm-{refseq.stem}.sh"
        with slurm_script_fp.open(mode="w") as fp:
            fp.write(slurm_script)

        try:
            result = subprocess.run(["sbatch", slurm_script_fp], capture_output=True, text=True, check=True)
            subprocess.run(["rm", slurm_script_fp])
        except subprocess.CalledProcessError as err:
            print("Command failed with return code:", err.returncode)
            print("STDERR:\n", err.stderr)
            print("STDOUT:\n", err.stdout)
        print("[gen-fastq] Job submitted:", result.stdout.strip())


    """
    4. write metadata file
    """

    metadata_fp = outdir/"metadata.tsv"

    with metadata_fp.open("w") as fp:
        fp.write("bamfile_path\tpercent_of_total_reads\tnumber_of_pairs_generated\n")

        for (reference, percent), (_, pair_count) in zip(refpercents, refreads):
            fp.write(f"{reference}\t{percent}\t{pair_count}\n")
    