#!/usr/bin/env python3

import argparse
import subprocess

from pathlib import Path
from sys import stderr


def parse_ref_percent(refpct: str):
    try:
        ref, pct = refpct.split(":")
        pct = int(pct)
        if not 0 <= pct <= 100:
            raise ValueError
        return Path(ref), pct
    except Exception:
        raise argparse.ArgumentTypeError("Expected format: path:percent (e.g. ref.fa:30)")


if __name__ == "__main__":
    """
    1. parse command line arguments
    """


    parser = argparse.ArgumentParser(description="""
        Generates a set of paired-end FASTQs with n read pairs. Users provide a set of references and what
        percentage of the FASTQ set should come from said reference, passed as -r [refname]:[int-percent].
        percents must add up to 100 or the script will prematurely exit.
        """)

    parser.add_argument("-n", "--num-pairs", type=int, action="store", required=False, default=1_000_000,
                        help="number of read pairs per paired end. Total reads across both R1 and R2 will be 2x this value.")
    parser.add_argument("-r", "--refpct", type=parse_ref_percent, action="append", required=True,
                        help="path to reference FASTA and associated percent (weight) in FASTQs. Repeatable.")
    parser.add_argument("-o", "--outdir", type=Path, action="store", required=False, default=Path("./output-wgsim").resolve())
    parser.add_argument("-b", "--blend-name", type=str, action="store", required=False)
    args = parser.parse_args()

    num_pairs: int = args.num_pairs
    refpercents: list[tuple[Path, int]] = [(path, pct) for path, pct in args.refpct if pct > 0]
    outdir: Path = args.outdir

    # argument validation
    refpct_total = sum(percent for _, percent in refpercents)
    if refpct_total != 100:
        print("[Error] expected percent sum to == 100, got", refpct_total, file=stderr)
        exit(1)

    for refpath, _ in refpercents:
        if not refpath.is_file():
            print("[Error] no file exists at path", str(refpath), file=stderr)
            exit(1)
        if refpath.suffix not in (".fa", ".fasta", '.fna'):
            print("[Error] expected reference with extension .fa, .fna, or .fasta, got file", refpath.name, file=stderr)

    
    """
    2. set up variables
    """


    # note: strings as no need to do any int specific operations 
    BASE_ERR_RATE   = '0.020'     # higher than expected error rate to account for degradation
    OUTER_DIST      = '100'       # small fragment size for same reason as listed above
    STDEV           = '30'        
    LEN_FIRST_READ  = '150'
    LEN_SECOND_READ = '150'
    MUTATION_RATE   = '0.001'
    # num_pairs defined in sec.1 through cli arg

    refreads = [(refpath, round(num_pairs / 100) * percent) for refpath, percent in refpercents]
    # convert percent -> number of read pairs

    fastqdir  = outdir/"fastqs"
    scriptdir = outdir/"scripts"
    logdir    = outdir/"logs"

    outdir.mkdir(exist_ok=True)
    fastqdir.mkdir(exist_ok=True)
    scriptdir.mkdir(exist_ok=True)
    logdir.mkdir(exist_ok=True)

    fastqdir  = str(fastqdir)
    logdir    = str(logdir)
    this_script_path = str(Path(__file__).resolve())


    """
    3. set up & execute wgsim slurm scripts
    """


    for refseq, num_pairs_per_ref in refreads:

        refseq_str = str(refseq)
        num_pairs_per_ref = str(num_pairs_per_ref)

        wgsim_flags = " ".join([
            '-e', BASE_ERR_RATE,
            '-d', OUTER_DIST,
            '-s', STDEV,
            '-N', num_pairs_per_ref,
            '-1', LEN_FIRST_READ,
            '-2', LEN_SECOND_READ,
            '-r', MUTATION_RATE
        ])

        slurm_script = "\n".join([
            "#!/bin/bash",
            "",
            "#SBATCH -n 1 --mem=10G -t 1:00:00",
           f"#SBATCH --output={logdir}/slurm-{refseq.stem}.out",
            "",
            "# Generate sample reads for reference file " + refseq.name,
           f"# Script generated by {this_script_path}",
            "",
            "# load required modules",
            "module load samtools/1.21",
            "",
           f"wgsim {refseq_str} {refseq.stem}-R1.fastq {refseq.stem}-R2.fastq " + wgsim_flags
        ])

        slurm_script_fp = scriptdir/f"slurm-{refseq.stem}.sh"
        with slurm_script_fp.open(mode="w") as fp:
            fp.write(slurm_script)

        try:
            result = subprocess.run(["sbatch", slurm_script_fp], capture_output=True, text=True, check=True)
        except subprocess.CalledProcessError as err:
            print("Command failed with return code:", err.returncode)
            print("STDERR:\n", err.stderr)
            print("STDOUT:\n", err.stdout)
        print("[gen-fastq] Job submitted:", result.stdout.strip())

    