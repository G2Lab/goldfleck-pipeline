#!/usr/bin/python3

"""
Generates simulated reads for Gamze's pipeline using wgsim
with no error rate. Each wgsim call runs in parallel
with its own SLURM script.

After no error rate runs successfully, will be updated to
run with varied error rates.

Author: akash pandit (apandit)
Last edited: June 30, 2025
"""

import argparse
from pathlib import Path
import os
import subprocess

def existing_directory(raw_path) -> Path:
    path = Path(raw_path)
    if not path.is_dir():
        raise argparse.ArgumentTypeError(f'"{raw_path}" is not an existing directory.')
    return path.absolute()


def parse_cli_arguments() -> argparse.Namespace:
    cwd = Path('.').absolute()
    parser = argparse.ArgumentParser()
    
    parser.add_argument(
        '-d', '--ref-dir', type=existing_directory,
        metavar='<path>', action='store', required=True,
        help="path to directory containing reference genomes to sample"   
    )
    parser.add_argument(
        '-o', '--out-dir',  type=Path,
        metavar='<path>', action='store', required=False, default=cwd/"output",
        help="desired output directory path, defaults to ./output"
    )
    parser.add_argument('-s', '--seed', type=int, required=False, help='set random seed for wgsim')
    
    return parser.parse_args()


def trim_extension(fp: str) -> str:
    if '.' in fp:
        return '.'.join(fp.split('.')[:-1])
    return fp


def get_wgsim_cmd_str(outdir: Path, refseq: Path, refseq_base: str, num_read_pairs: int, mutation_rate: float, random_seed: int) -> str:
    refseq_name = str(refseq.absolute())
    assert mutation_rate <= 1 and mutation_rate >= 0, "error rate must be in [0, 1]"

    base_error_rate = 0.020
    outer_dist      = 100
    stdev           = 30
    # num_read_pairs  = 1_000_000  #
    len_first_read  = 150
    len_second_read = 150
    
    fastq_path_base = str(outdir/"fastqs"/refseq_base/refseq_base) + f"-mut{mutation_rate}-"

    wgsim_cmd_base = f"# wgsim with mutation rate = {mutation_rate}\n" + \
        " \\\n".join(["wgsim " + refseq_name, f"\t{fastq_path_base}1.fq", f"\t{fastq_path_base}2.fq"])
    wgsim_cmd_args = [
      "\t-e", str(base_error_rate),
        "-d", str(outer_dist),
        "-s", str(stdev),
        "-N", str(num_read_pairs),
        "-1", str(len_first_read),
        "-2", str(len_second_read),
        "-r", str(mutation_rate)
    ]
    if random_seed is not None:
        wgsim_cmd_args.extend(["-S", str(random_seed)])

    return wgsim_cmd_base + " \\\n" + " ".join(wgsim_cmd_args) + f" > {str(outdir/'fastqs'/refseq_base)}/logs/wgsim-{refseq_base}-mut{mutation_rate}.log"


if __name__ == "__main__":
    args = parse_cli_arguments()
    refdir: Path    = args.ref_dir
    outdir: Path    = args.out_dir
    seed: int       = args.seed
    read_pairs      = 1_000_000
    
    unzipped_globs = ['*.fasta', '*.fas', '*.fa', '*.fna']
    zipped_globs = [ext + '.gz' for ext in unzipped_globs]

    # unzip zipped genomes
    # NOTE: (not needed for illumina ART or dwgsim which both have .gz support builtin)
    # NOTE: gunzipping a non gzip file with a .gz extension may have unintended side effects
    
    zipped = " ".join([str(fp.absolute()) for pattern in zipped_globs for fp in refdir.glob(pattern) if fp.is_file()])
    if len(zipped) > 0:
        subprocess.run(f"gunzip {zipped}")  
    
    # get all files w/ extensions in unzipped_globs
    refseqs = [fp for pattern in unzipped_globs for fp in refdir.glob(pattern) if fp.is_file()]
    if len(refseqs) == 0:
        print("\n[gen-sim-reads] Warning: no reference genomes found in " + str(refdir) + ", terminating early.\n")
        exit(1)
    
    # make output dirs if not already created
    os.makedirs(outdir/"scripts", exist_ok=True)
    
    if os.path.exists(outdir/"refseq-inputs") and (outdir/"refseq-inputs").resolve() != refdir:
        print(f"[gen-sim-reads] Error: {str(outdir/'refseq-inputs')} is already in use, please move/rename the directory to allow for a reference to the input data to be created here.")

    if not os.path.exists(outdir/"refseq-inputs") or not (outdir/"refseq-inputs").resolve() == refdir:
        os.symlink(src=refdir, dst=outdir/"refseq-inputs")

    # create & batch slurm scripts
    for refseq in refseqs:
        refseq_base = trim_extension(refseq.name)
        logdir = outdir/"fastqs"/refseq_base/"logs"
        os.makedirs(logdir, exist_ok=True)

        slurm_script = "\n".join([
            "#!/usr/bin/bash",
            "#",
            "#SBATCH -n 1 --mem 20000 -t 1:00:00",
            "#SBATCH --mail-type=ALL",
            "#SBATCH --mail-user=" + os.getlogin() + "@nygenome.org",
           f"#SBATCH --output={str(logdir)}/slurm-{refseq_base}.out",
            "",
            "# Generate sample reads for reference file " + refseq.name,
            "# Script generated by /gpfs/commons/groups/gursoylab/apandit/lions/gen-sim-reads.py",
            "",
            "# load required modules",
            "module load samtools/1.21",
            "",
            get_wgsim_cmd_str(outdir, refseq, refseq_base, num_read_pairs=read_pairs, mutation_rate=0, random_seed=seed),
            get_wgsim_cmd_str(outdir, refseq, refseq_base, num_read_pairs=read_pairs, mutation_rate=0.0010, random_seed=seed),  # default mutation rate
            get_wgsim_cmd_str(outdir, refseq, refseq_base, num_read_pairs=read_pairs, mutation_rate=0.0025, random_seed=seed),  
            get_wgsim_cmd_str(outdir, refseq, refseq_base, num_read_pairs=read_pairs, mutation_rate=0.0050, random_seed=seed),
            get_wgsim_cmd_str(outdir, refseq, refseq_base, num_read_pairs=read_pairs, mutation_rate=0.0100, random_seed=seed),
            get_wgsim_cmd_str(outdir, refseq, refseq_base, num_read_pairs=read_pairs, mutation_rate=0.0250, random_seed=seed),
            get_wgsim_cmd_str(outdir, refseq, refseq_base, num_read_pairs=read_pairs, mutation_rate=0.0500, random_seed=seed)
            # ok this has to break the aligner theres no way it doesnt
        ])

        slurm_script_fp = f'{str(outdir)}/scripts/wgsim-slurm-{refseq_base}.sh'
        with open(slurm_script_fp, 'w') as fp:
            fp.write(slurm_script)

        try:
            result = subprocess.run(["sbatch", slurm_script_fp], capture_output=True, text=True, check=True)
        except subprocess.CalledProcessError as err:
            print("Command failed with return code:", err.returncode)
            print("STDERR:\n", err.stderr)
            print("STDOUT:\n", err.stdout)
        print("[gen-sim-reads] Job submitted:", result.stdout.strip())
